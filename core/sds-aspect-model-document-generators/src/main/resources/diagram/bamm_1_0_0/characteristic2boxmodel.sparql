# Copyright (c) 2021 Robert Bosch Manufacturing Solutions GmbH
#
# See the AUTHORS file(s) distributed with this work for additional
# information regarding authorship.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# SPDX-License-Identifier: MPL-2.0

prefix bamm: <urn:bamm:io.openmanufacturing:meta-model:1.0.0#>
prefix bamm-c: <urn:bamm:io.openmanufacturing:characteristic:1.0.0#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <urn:bamm:io.openmanufacturing:meta-model:1.0.0/boxmodel#>

# Generates boxes for Characteristics that are not Collections, Constraints, Enumeration/State or StructuredValue
construct {
  ?characteristicBox a :Box .
  ?characteristicBox :prototype "Characteristic" .
  ?characteristicBox :title ?characteristicName .
  ?characteristicBox :entries (
     [
       a :Entry ;
       :title "preferredName" ;
       :text ?preferredName
     ]
     [
       a :Entry ;
       :title "description" ;
       :text ?description
     ]
     [
       a :Entry ;
       :title "dataType" ;
       :text ?dataType
     ]
     [
       a :Entry ;
       :title "see" ;
       :text ?seeValues
     ]
  )
} where {
  ?characteristic rdf:type/rdfs:subClassOf* bamm:Characteristic .

  # Apply only to those Characteristics which are used in the Aspect model,
  # i.e. where a directed link from an Aspect to the Characteristic exists.
  # (<>|!<>) matches any RDF property.
  filter( exists {
    ?aspect a bamm:Aspect .
    ?aspect (<>|!<>)* ?characteristic .
  } )

  # Don't apply to Constraints
  filter( !exists { ?characteristic bamm-c:baseCharacteristic [] } )
  # Don't apply to Enumerations or States
  filter( !exists { ?characteristic a bamm-c:Enumeration } && !exists { ?characteristic a bamm-c:State } )
  # Don't apply to Collections
  filter( !exists { ?characteristic rdf:type/rdfs:subClassOf* bamm-c:Collection } )
  # Don't apply to Either
  filter( !exists { ?characteristic rdf:type/rdfs:subClassOf* bamm-c:Either } )
  # Don't apply to StructuredValue
  filter( !exists { ?characteristic rdf:type/rdfs:subClassOf* bamm-c:StructuredValue } )

  ?characteristic bamm:name ?characteristicName .
  bind( concat( ?characteristicName, "Characteristic" ) as ?boxName )
  bind( iri( concat( str( : ), ?boxName ) ) as ?characteristicBox )

  optional {
    ?characteristic bamm:preferredName ?preferredNameValue .
    filter( lang( ?preferredNameValue ) = "en" )
    bind( xsd:string( ?preferredNameValue ) as ?preferredName )
  }

  optional {
    ?characteristic bamm:description ?descriptionValue .
    filter( lang( ?descriptionValue ) = "en" )
    bind( xsd:string( ?descriptionValue ) as ?description )
  }

  optional {
    ?characteristic bamm:dataType ?dataTypeValue .
    filter( strstarts( str( ?dataTypeValue ), str( xsd: ) )
         || strstarts( str( ?dataTypeValue ), str( rdf: ) )
         || strstarts( str( ?dataTypeValue ), str( bamm: ) ) )
    bind( replace( str( ?dataTypeValue ), "[^#]*#(.*)", "$1") as ?dataType )
  }

  # Subquery which concatenates all values for the bamm:see attributes
  optional {
    {
      select * where {
        ?characteristic rdf:type/rdfs:subClassOf* bamm:Characteristic .
        filter ( str( ?subQueryCharacteristic ) = str( ?characteristic ) )
        {
          select ?subQueryCharacteristic ( group_concat( ?seeValue; separator=", " ) as ?seeValues )
          where {
            select *
            where {
              ?subQueryCharacteristic rdf:type/rdfs:subClassOf* bamm:Characteristic .
              ?subQueryCharacteristic bamm:see ?seeValue .
            }
            order by str( ?seeValue )
          }
          group by ?subQueryCharacteristic
        }
      }
    }
  }
}

