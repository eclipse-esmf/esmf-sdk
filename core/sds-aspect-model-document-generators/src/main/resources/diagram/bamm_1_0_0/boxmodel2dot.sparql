# Copyright (c) 2021 Robert Bosch Manufacturing Solutions GmbH
#
# See the AUTHORS file(s) distributed with this work for additional
# information regarding authorship.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# SPDX-License-Identifier: MPL-2.0

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <urn:bamm:io.openmanufacturing:meta-model:1.0.0/boxmodel#>

# Transforms a box model (boxes and edges) into Graphviz/dot statements
select ?dotStatement
where {
  # Boxes
  {
    ?box a :Box .
    ?box :title ?title .

    optional {
      ?box :prototype ?prototype .
    }
    bind( coalesce( concat( " «", ?prototype, "»\\n" ), "" ) as ?prototypeString )

    optional {
      select ?box ( group_concat( ?attribute; separator="" ) as ?attributes )
      where {
        {
          select ?box ?attribute
          where {
            ?box (:entries/rdf:rest*/rdf:first)|(:entry) ?entry .
            ?entry :title ?entryTitle .
            optional {
              ?entry :text ?entryText .
            }
            bind( if( bound( ?entryText ), concat( ?entryTitle, ": ", str( ?entryText ) , "\\l" ) , "" ) as ?attribute )
          }
        }
      }
      group by ?box
    }

    optional {
      ?box :fillcolor ?fillcolor .
    }
    bind( coalesce( concat( ", fillcolor=\\\"", ?fillcolor, "\\\"" ), "" ) as ?fillcolorAttribute )

    bind( replace( str( ?box ), "[^#]*#(.*)", "$1") as ?boxName )
    bind( replace( coalesce( concat( "|", ?attributes ), "" ), "<", "\\\\<" ) as ?attributes0 )
    bind( replace( ?attributes0, ">", "\\\\>" ) as ?attributes1 )
    bind( replace( ?attributes1, "\\{", "\\\\{" ) as ?attributes2 )
    bind( replace( ?attributes2, "\\}", "\\\\}" ) as ?attributes3 )
    bind( replace( ?attributes3, "\\\"", "\\\\\"" ) as ?attributes4 )
    bind( concat( ?boxName, " [label=\"{", ?prototypeString, ?title, ?attributes4, ?fillcolorAttribute, "}\"]" ) as ?dotStatement )
  }

  union

  # Edges
  {
    ?edge a :Edge .
    ?edge :title ?title .
    ?edge :from ?from .
    ?edge :to ?to .

    bind( replace( str( ?from ), "[^#]*#(.*)", "$1") as ?fromBoxName )
    bind( replace( str( ?to ), "[^#]*#(.*)", "$1") as ?toBoxName )

    bind( concat( ?fromBoxName, " -> ", ?toBoxName, " [label=\"", ?title, "\"]" ) as ?dotStatement )
  }
}

