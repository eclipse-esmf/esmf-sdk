<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2021 Robert Bosch Manufacturing Solutions GmbH
  ~
  ~ See the AUTHORS file(s) distributed with this work for additional
  ~ information regarding authorship.
  ~
  ~ This Source Code Form is subject to the terms of the Mozilla Public
  ~ License, v. 2.0. If a copy of the MPL was not distributed with this
  ~ file, You can obtain one at https://mozilla.org/MPL/2.0/.
  ~
  ~ SPDX-License-Identifier: MPL-2.0
  -->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <parent>
      <groupId>org.eclipse.esmf</groupId>
      <artifactId>esmf-sdk-parent</artifactId>
      <version>2.9.4</version>
      <relativePath>../../pom.xml</relativePath>
   </parent>
   <modelVersion>4.0.0</modelVersion>

   <artifactId>samm-cli</artifactId>
   <name>Semantic Aspect Meta Model Command Line Tool</name>
   <packaging>jar</packaging>

   <properties>
      <packaging-type>jar</packaging-type>
      <main-class>org.eclipse.esmf.SammCli</main-class>
      <binary-name>samm</binary-name>
      <graalvm-config-path>${project.build.directory}/classes/META-INF/native-image/${project.groupId}/${project.artifactId}</graalvm-config-path>
      <!-- The separate jar that is built without GraalVM-internal dependencies which trip up the GraalVM compiler,
           which is exclusive used to pass on to native-image -->
      <native-image-jar>${project.artifactId}-${project.version}-for-native</native-image-jar>
      <skip.maven.surefire>false</skip.maven.surefire>
      <skip.maven.surefire.report.plugin>false</skip.maven.surefire.report.plugin>
      <skip.maven.shade>false</skip.maven.shade>
   </properties>

   <dependencies>
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>esmf-semantic-aspect-meta-model</artifactId>
      </dependency>
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>esmf-aspect-model-starter</artifactId>
      </dependency>
      <dependency>
         <groupId>com.fasterxml.jackson.core</groupId>
         <artifactId>jackson-databind</artifactId>
      </dependency>
      <dependency>
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-api</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-to-slf4j</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-api</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-core</artifactId>
      </dependency>
      <dependency>
         <groupId>ch.qos.logback</groupId>
         <artifactId>logback-classic</artifactId>
      </dependency>
      <dependency>
         <groupId>info.picocli</groupId>
         <artifactId>picocli</artifactId>
      </dependency>
      <dependency>
         <groupId>org.fusesource.jansi</groupId>
         <artifactId>jansi</artifactId>
      </dependency>
      <!-- Required for GraalVM build: Annotations for substitution classes -->
      <dependency>
         <groupId>org.graalvm.nativeimage</groupId>
         <artifactId>svm</artifactId>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>org.graalvm.sdk</groupId>
         <artifactId>graal-sdk</artifactId>
         <version>${graalvm-version}</version>
      </dependency>
      <dependency>
         <groupId>org.graalvm.js</groupId>
         <artifactId>js</artifactId>
      </dependency>

      <!-- Test dependencies -->
      <dependency>
         <groupId>org.junit.jupiter</groupId>
         <artifactId>junit-jupiter</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.assertj</groupId>
         <artifactId>assertj-core</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>esmf-test-aspect-models</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>esmf-aspect-model-aas-generator</artifactId>
         <scope>compile</scope>
         <exclusions>
            <exclusion>
               <groupId>org.apache.logging.log4j</groupId>
               <artifactId>log4j-api</artifactId>
            </exclusion>
         </exclusions>
      </dependency>
      <dependency>
         <groupId>org.apache.tika</groupId>
         <artifactId>tika-core</artifactId>
         <scope>test</scope>
      </dependency>
   </dependencies>

   <build>
      <resources>
         <resource>
            <targetPath>${project.build.outputDirectory}</targetPath>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <includes>
               <include>**/*.properties</include>
               <include>**/*.html</include>
               <include>**/*.js</include>
               <include>**/*.txt</include>
               <include>**/*.xml</include>
               <include>**/*.json</include>
            </includes>
         </resource>
      </resources>

      <pluginManagement>
         <plugins>
            <plugin>
               <groupId>org.graalvm.nativeimage</groupId>
               <artifactId>native-image-maven-plugin</artifactId>
               <version>${graalvm-version}</version>
               <configuration>
                  <imageName>${binary-name}</imageName>
                  <mainClass>${main-class}</mainClass>
                  <buildArgs>
                     <buildArg>--no-fallback</buildArg>
                     <buildArg>-cp ${project.build.directory}/${project.artifactId}-${project.version}.jar
                     </buildArg>
                     <buildArg>-Djava.awt.headless=true</buildArg>
                  </buildArgs>
               </configuration>
            </plugin>

         </plugins>
      </pluginManagement>

      <plugins>
         <!-- Configure maven surefire plugin (execution of unit tests) -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
               <systemPropertyVariables>
                  <packaging-type>${packaging-type}</packaging-type>
                  <executableJar>${project.build.directory}/${project.artifactId}-${project.version}.jar
                  </executableJar>
                  <binary>${project.build.directory}/${binary-name}</binary>
                  <graalVmConfigPath>${graalvm-config-path}</graalVmConfigPath>
               </systemPropertyVariables>
               <forkCount>1</forkCount>
               <reuseForks>false</reuseForks>
               <argLine>-Xmx6g</argLine>
               <skip>${skip.maven.surefire}</skip>
               <reportsDirectory>${project.build.directory}/${testreports.surefire}</reportsDirectory>
               <!-- Do NOT wildcard include *Test.java, because then we would also run the SammCliIntegrationTest -->
               <includes>
                  <include>**/SammCliTest.java</include>
                  <include>**/CommandExecutorTest.java</include>
               </includes>
            </configuration>
         </plugin>

         <!-- Disable jacoco-maven-plugin here due to memory overhead -->
         <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <executions>
               <execution>
                  <id>default-prepare-agent</id>
                  <phase>none</phase>
               </execution>
            </executions>
         </plugin>

         <!-- Disable maven site plugin. It is not required since the report is created in the
              esmf-sdk-test-report module -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-site-plugin</artifactId>
            <version>${maven-site-plugin-version}</version>
            <configuration>
               <skip>true</skip>
            </configuration>
         </plugin>

         <!-- Executes build-time-only code -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
               <!-- Generate admin-shell reflection config -->
               <execution>
                  <id>generate-admin-shell-reflection-config</id>
                  <phase>process-classes</phase>
                  <goals>
                     <goal>java</goal>
                  </goals>
                  <configuration>
                     <!-- The main class of your build-time scanning code -->
                     <mainClass>org.eclipse.esmf.buildtime.Aas4jClassSetup</mainClass>
                     <!-- Pass the properties file as a commandline param -->
                     <commandlineArgs>${project.build.outputDirectory}/adminshell.properties</commandlineArgs>
                     <cleanupDaemonThreads>false</cleanupDaemonThreads>
                  </configuration>
               </execution>
               <!-- Execute adjustments of native configs that were generated during the previous maven build -->
               <execution>
                  <id>customize-resource-config</id>
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>java</goal>
                  </goals>
                  <configuration>
                     <!-- The main class of your build-time scanning code -->
                     <mainClass>org.eclipse.esmf.buildtime.CustomizeGraalVmConfigs</mainClass>
                     <!-- Pass the build target file as a commandline param -->
                     <commandlineArgs>${project.build.outputDirectory}/META-INF/native-image/${project.groupId}/${project.artifactId}</commandlineArgs>
                     <cleanupDaemonThreads>false</cleanupDaemonThreads>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <!-- Build fat jar -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <executions>
               <execution>
                  <id>shade-for-native-image</id>
                  <phase>package</phase>
                  <goals>
                     <goal>shade</goal>
                  </goals>
                  <configuration>
                     <finalName>${native-image-jar}</finalName>
                     <createDependencyReducedPom>false</createDependencyReducedPom>
                     <createSourcesJar>false</createSourcesJar>
                     <skip>${skip.maven.shade}</skip>
                     <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                           <manifestEntries>
                              <Main-Class>${main-class}</Main-Class>
                           </manifestEntries>
                        </transformer>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                     </transformers>
                     <artifactSet>
                        <excludes>
                           <!-- Duplicate annotations that are already contained in javax.annotation-api -->
                           <exclude>javax.annotation:jsr250-api</exclude>
                           <!-- GraalVM SDK classes & friends must not be used at runtime -->
                           <exclude>org.graalvm.sdk:graal-sdk</exclude>
                           <exclude>org.graalvm.nativeimage:svm</exclude>
                           <exclude>org.graalvm.truffle:truffle-api</exclude>
                        </excludes>
                     </artifactSet>
                     <filters>
                        <!-- Required to prevent overlapping resources -->
                        <filter>
                           <artifact>*:*</artifact>
                           <excludes>
                              <exclude>module-info.class</exclude>
                              <exclude>META-INF/*</exclude>
                              <exclude>META-INF/sisu/javax.inject.Named</exclude>
                              <exclude>META-INF/plexus/components.xml</exclude>
                              <exclude>META-INF.versions*/**</exclude>
                              <exclude>META-INF/versions*/**</exclude>
                              <exclude>META-INF/maven/**</exclude>
                              <exclude>plugin.xml</exclude>
                              <exclude>about.html</exclude>
                           </excludes>
                        </filter>
                        <!-- Required to override the excludes above -->
                        <filter>
                           <artifact>${project.groupId}:${project.artifactId}</artifact>
                           <excludeDefaults>false</excludeDefaults>
                           <includes>
                              <include>**</include>
                              <include>META-INF/**</include>
                              <include>git.properties</include>
                           </includes>
                           <excludes>
                              <!-- Explicitly exclude build-time-only code from jar -->
                              <exclude>org/eclipse/esmf/buildtime/**</exclude>
                           </excludes>
                        </filter>
                        <!-- Clashes with the files from xml-apis-ext -->
                        <filter>
                           <artifact>xml-apis:xml-apis</artifact>
                           <excludes>
                              <exclude>license/**</exclude>
                           </excludes>
                        </filter>
                        <!-- Clashes with the same file from batik-rasterizer -->
                        <filter>
                           <artifact>org.apache.xmlgraphics:batik-svgrasterizer</artifact>
                           <excludes>
                              <exclude>org/apache/batik/apps/rasterizer/resources/rasterizer.policy</exclude>
                           </excludes>
                        </filter>
                        <!-- These configs add lots of spurious GraalVM configuration -->
                        <filter>
                           <artifact>org.jboss.forge.roaster:roaster-jdt</artifact>
                           <excludes>
                              <exclude>META-INF/native-image/**</exclude>
                           </excludes>
                        </filter>
                        <!-- Required to have Model Instantiators available -->
                        <filter>
                           <artifact>org.eclipse.esmf:esmf-aspect-meta-model-java</artifact>
                           <includes>
                              <include>**</include>
                           </includes>
                        </filter>
                        <!-- Prevent overlapping classes from javax modules -->
                        <filter>
                           <artifact>jakarta.activation:jakarta.activation-api</artifact>
                           <excludes>
                              <exclude>**</exclude>
                           </excludes>
                        </filter>
                     </filters>
                  </configuration>
               </execution>
               <execution>
                  <id>default-shade</id>
                  <phase>package</phase>
                  <goals>
                     <goal>shade</goal>
                  </goals>
                  <configuration>
                     <createDependencyReducedPom>false</createDependencyReducedPom>
                     <createSourcesJar>false</createSourcesJar>
                     <skip>${skip.maven.shade}</skip>
                     <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                           <manifestEntries>
                              <Main-Class>${main-class}</Main-Class>
                           </manifestEntries>
                        </transformer>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                     </transformers>
                     <artifactSet>
                        <excludes>
                           <!-- Duplicate annotations that are already contained in javax.annotation-api -->
                           <exclude>javax.annotation:jsr250-api</exclude>
                        </excludes>
                     </artifactSet>
                     <filters>
                        <!-- Required to prevent overlapping resources -->
                        <filter>
                           <artifact>*:*</artifact>
                           <excludes>
                              <exclude>module-info.class</exclude>
                              <exclude>META-INF/*</exclude>
                              <exclude>META-INF/sisu/javax.inject.Named</exclude>
                              <exclude>META-INF/plexus/components.xml</exclude>
                              <exclude>META-INF.versions*/**</exclude>
                              <exclude>META-INF/versions*/**</exclude>
                              <exclude>META-INF/maven/**</exclude>
                              <exclude>plugin.xml</exclude>
                              <exclude>about.html</exclude>
                           </excludes>
                        </filter>
                        <!-- Required to override the excludes above -->
                        <filter>
                           <artifact>${project.groupId}:${project.artifactId}</artifact>
                           <excludeDefaults>false</excludeDefaults>
                           <includes>
                              <include>**</include>
                              <include>META-INF/**</include>
                              <include>git.properties</include>
                           </includes>
                           <excludes>
                              <!-- Explicitly exclude build-time-only code from jar -->
                              <exclude>org/eclipse/esmf/buildtime/**</exclude>
                           </excludes>
                        </filter>
                        <!-- Clashes with the files from xml-apis-ext -->
                        <filter>
                           <artifact>xml-apis:xml-apis</artifact>
                           <excludes>
                              <exclude>license/**</exclude>
                           </excludes>
                        </filter>
                        <!-- Clashes with the same file from batik-rasterizer -->
                        <filter>
                           <artifact>org.apache.xmlgraphics:batik-svgrasterizer</artifact>
                           <excludes>
                              <exclude>org/apache/batik/apps/rasterizer/resources/rasterizer.policy</exclude>
                           </excludes>
                        </filter>
                        <!-- These configs add lots of spurious GraalVM configuration -->
                        <filter>
                           <artifact>org.jboss.forge.roaster:roaster-jdt</artifact>
                           <excludes>
                              <exclude>META-INF/native-image/**</exclude>
                           </excludes>
                        </filter>
                        <!-- Required to have Model Instantiators available -->
                        <filter>
                           <artifact>org.eclipse.esmf:esmf-aspect-meta-model-java</artifact>
                           <includes>
                              <include>**</include>
                           </includes>
                        </filter>
                        <!-- Prevent overlapping classes from javax modules -->
                        <filter>
                           <artifact>jakarta.activation:jakarta.activation-api</artifact>
                           <excludes>
                              <exclude>**</exclude>
                           </excludes>
                        </filter>
                     </filters>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>pl.project13.maven</groupId>
            <artifactId>git-commit-id-plugin</artifactId>
            <executions>
               <execution>
                  <id>get-the-git-infos</id>
                  <phase>compile</phase>
                  <goals>
                     <goal>revision</goal>
                  </goals>
               </execution>
            </executions>
            <configuration>
               <dotGitDirectory>${project.basedir}/../.git</dotGitDirectory>
               <generateGitPropertiesFile>true</generateGitPropertiesFile>
               <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
               </generateGitPropertiesFilename>
            </configuration>
         </plugin>

         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
               <execution>
                  <id>unpack-esmf-test-aspect-models</id>
                  <phase>validate</phase>
                  <goals>
                     <goal>unpack</goal>
                  </goals>
                  <configuration>
                     <artifactItems>
                        <artifactItem>
                           <groupId>org.eclipse.esmf</groupId>
                           <artifactId>esmf-test-aspect-models</artifactId>
                           <type>jar</type>
                           <overWrite>true</overWrite>
                           <outputDirectory>
                              ${project.build.outputDirectory}
                           </outputDirectory>
                           <includes>**/*.ttl</includes>
                        </artifactItem>
                     </artifactItems>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
               <annotationProcessorPaths combine.children="append">
                  <path>
                     <groupId>info.picocli</groupId>
                     <artifactId>picocli-codegen</artifactId>
                     <version>${picocli-version}</version>
                  </path>
               </annotationProcessorPaths>
               <compilerArgs>
                  <arg>-Aproject=${project.groupId}/${project.artifactId}</arg>
                  <arg>--add-exports</arg>
                  <arg>java.desktop/sun.awt=ALL-UNNAMED</arg>
                  <arg>--add-exports</arg>
                  <arg>java.desktop/sun.font=ALL-UNNAMED</arg>
                  <arg>--add-exports</arg>
                  <arg>org.graalvm.sdk/org.graalvm.nativeimage.impl=ALL-UNNAMED</arg>
               </compilerArgs>
               <forceJavacCompilerUse>true</forceJavacCompilerUse>
            </configuration>
         </plugin>

         <!-- Configure maven failsave plugin (execution of integration tests) -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${maven-failsafe-plugin-version}</version>
            <executions>
               <execution>
                  <goals>
                     <goal>integration-test</goal>
                     <goal>verify</goal>
                  </goals>
               </execution>
            </executions>
            <configuration>
               <systemPropertyVariables>
                  <packaging-type>${packaging-type}</packaging-type>
                  <executableJar>${project.build.directory}/${project.artifactId}-${project.version}.jar
                  </executableJar>
                  <binary>${project.build.directory}/${binary-name}</binary>
                  <graalVmConfigPath>${graalvm-config-path}</graalVmConfigPath>
                  <forkCount>1</forkCount>
                  <reuseForks>true</reuseForks>
                  <argLine>-Xmx4096m</argLine>
               </systemPropertyVariables>
               <includes>
                  <include>**/SammCliIntegrationTest.java</include>
               </includes>
            </configuration>
         </plugin>

         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
               <!-- For testing of the command executor, we need a test JAR file -->
               <execution>
                  <id>build-test-jar</id>
                  <goals>
                     <goal>test-jar</goal>
                  </goals>
                  <!-- Make sure the plugin is built before maven surefire runs -->
                  <phase>process-test-classes</phase>
                  <configuration>
                     <archive>
                        <manifest>
                           <mainClass>org.eclipse.esmf.JavaCmdLine</mainClass>
                        </manifest>
                     </archive>
                     <classifier>tests</classifier>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <configuration>
               <excludePackageNames>org.eclipse.esmf.substitution</excludePackageNames>
            </configuration>
         </plugin>
      </plugins>
   </build>

   <profiles>
      <profile>
         <id>copy-font-configuration</id>
         <activation>
            <os>
               <family>windows</family>
            </os>
         </activation>
         <build>
            <plugins>
               <!-- Copy font configuration files from the GraalVM directory (pointed to by JAVA_HOME in native builds) to the output directory -->
               <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>wagon-maven-plugin</artifactId>
                  <version>1.0</version>
                  <executions>
                     <execution>
                        <id>copy-fontconfig-bfc</id>
                        <phase>process-resources</phase>
                        <goals>
                           <goal>download-single</goal>
                        </goals>
                        <configuration>
                           <url>file://${env.JAVA_HOME}/lib</url>
                           <fromFile>fontconfig.bfc</fromFile>
                           <toFile>${project.build.outputDirectory}/fontconfig.bfc</toFile>
                        </configuration>
                     </execution>
                  </executions>
               </plugin>
            </plugins>
         </build>
      </profile>

      <profile>
         <id>native</id>
         <properties>
            <packaging-type>native</packaging-type>
            <skip.maven.surefire>true</skip.maven.surefire>
            <maven.resources.skip>true</maven.resources.skip>
            <maven.source.skip>true</maven.source.skip>
         </properties>

         <build>
            <plugins>
               <plugin>
                  <groupId>org.graalvm.buildtools</groupId>
                  <artifactId>native-maven-plugin</artifactId>
                  <extensions>true</extensions>
                  <executions>
                     <execution>
                        <id>build-native</id>
                        <goals>
                           <goal>compile</goal>
                        </goals>
                        <phase>package</phase>
                     </execution>
                  </executions>
                  <configuration>
                     <mainClass>${main-class}</mainClass>
                     <imageName>./${binary-name}</imageName>
                     <buildArgs>
                        <arg>--verbose</arg>
                        <arg>-march=compatibility</arg>
                        <arg>-H:EnableURLProtocols=http,https</arg>
                        <arg>--enable-https</arg>
                        <arg>--no-fallback</arg>
                        <arg>--report-unsupported-elements-at-runtime</arg>
                        <arg>--features=org.eclipse.esmf.nativefeatures.SammCliFeatures</arg>
                        <arg>--language:js</arg>
                        <arg>-H:JNIConfigurationFiles=src/main/resources/META-INF/native-image/${project.groupId}/${project.artifactId}/jni-config.json</arg>
                        <arg>-H:DynamicProxyConfigurationFiles=src/main/resources/META-INF/native-image/${project.groupId}/${project.artifactId}/proxy-config.json</arg>
                        <arg>-H:ReflectionConfigurationFiles=src/main/resources/META-INF/native-image/${project.groupId}/${project.artifactId}/reflect-config.json</arg>
                        <arg>-H:ResourceConfigurationFiles=src/main/resources/META-INF/native-image/${project.groupId}/${project.artifactId}/resource-config.json</arg>
                        <arg>-H:-DeadlockWatchdogExitOnTimeout</arg>
                        <arg>-H:DeadlockWatchdogInterval=0</arg>
                        <arg>-H:+AddAllCharsets</arg>
                        <arg>-H:+ReportExceptionStackTraces</arg>
                        <arg>-H:+PrintClassInitialization</arg>
                        <arg>-J-XX:MaxRAMPercentage=90.0</arg>
                        <arg>-J-XX:GCTimeRatio=19</arg>
                        <arg>-J--add-exports=java.desktop/sun.awt=ALL-UNNAMED</arg>
                        <arg>-J--add-exports=java.desktop/sun.font=ALL-UNNAMED</arg>
                        <arg>-J--add-exports=org.graalvm.sdk/org.graalvm.nativeimage.impl=ALL-UNNAMED</arg>
                        <arg>-J--add-exports=org.graalvm.nativeimage.builder/com.oracle.svm.core.configure=ALL-UNNAMED</arg>
                     </buildArgs>
                     <quickBuild>true</quickBuild>
                     <classpath>
                        <param>${project.build.directory}/${native-image-jar}.jar</param>
                     </classpath>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>
   </profiles>
</project>
